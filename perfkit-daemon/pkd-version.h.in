#ifndef __PKD_VERSION_H__
#define __PKD_VERSION_H__

/**
 * SECTION:pkd-version
 * @title: Versioning API
 * @short_description: compile-time version checking
 *
 * provides some API and definitions for compile-time version checking.
 */

/**
 * PKD_MAJOR_VERSION:
 *
 * Major version of Pkd, e.g. 1 in "1.2.3"
 */
#define PKD_MAJOR_VERSION (@PKD_MAJOR_VERSION@)

/**
 * PKD_MINOR_VERSION:
 *
 * Minor version of Pkd, e.g. 2 in "1.2.3"
 */
#define PKD_MINOR_VERSION (@PKD_MINOR_VERSION@)

/**
 * PKD_MICRO_VERSION:
 *
 * Micro version of Pkd, e.g. 3 in "1.2.3"
 */
#define PKD_MICRO_VERSION (@PKD_MICRO_VERSION@)

/**
 * PKD_API_VERSION_S:
 *
 * Version of the API of Pkd
 */
#define PKD_API_VERSION_S "@PKD_API_VERSION@"

/**
 * PKD_VERSION_S:
 *
 * Stringified version of Pkd, e.g. "1.2.3".
 *
 * Useful for display.
 */
#define PKD_VERSION_S "@PKD_VERSION@"

/**
 * PKD_VERSION_HEX:
 *
 * Hexadecimally encoded version of Pkd, e.g. 0x01020300"
 *
 * Useful for comparisons.
 */
#define PKD_VERSION_HEX (PKD_MAJOR_VERSION << 24 | PKD_MINOR_VERSION << 16 | PKD_MICRO_VERSION << 8)

/**
 * PKD_CHECK_VERSION:
 * @major: major component of the version to check
 * @minor: minor component of the version to check
 * @micro: micro component of the version to check
 *
 * Checks whether the decomposed version (@major, @minor, @micro) is
 * bigger than the version of Pkd. This is a compile-time
 * check only.
 */
#define PKD_CHECK_VERSION(major,minor,micro)   \
        (PKD_MAJOR_VERSION >= (major) ||       \
         (PKD_MAJOR_VERSION == (major) &&      \
          PKD_MINOR_VERSION > (minor)) ||      \
         (PKD_MAJOR_VERSION == (major) &&      \
          PKD_MINOR_VERSION == (minor) &&      \
          PKD_MICRO_VERSION >= (micro)))

#endif /* __PKD_VERSION_H__ */
