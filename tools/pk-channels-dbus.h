/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_com_dronelabs_Perfkit_Channels
#define DBUS_GLIB_CLIENT_WRAPPERS_com_dronelabs_Perfkit_Channels

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_dronelabs_Perfkit_Channels_add (DBusGProxy *proxy, char** OUT_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "Add", error, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_path, G_TYPE_INVALID);
}

typedef void (*com_dronelabs_Perfkit_Channels_add_reply) (DBusGProxy *proxy, char *OUT_path, GError *error, gpointer userdata);

static void
com_dronelabs_Perfkit_Channels_add_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_path;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_path, G_TYPE_INVALID);
  (*(com_dronelabs_Perfkit_Channels_add_reply)data->cb) (proxy, OUT_path, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_dronelabs_Perfkit_Channels_add_async (DBusGProxy *proxy, com_dronelabs_Perfkit_Channels_add_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Add", com_dronelabs_Perfkit_Channels_add_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_dronelabs_Perfkit_Channels_remove (DBusGProxy *proxy, const char* IN_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "Remove", error, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*com_dronelabs_Perfkit_Channels_remove_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
com_dronelabs_Perfkit_Channels_remove_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(com_dronelabs_Perfkit_Channels_remove_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_dronelabs_Perfkit_Channels_remove_async (DBusGProxy *proxy, const char* IN_path, com_dronelabs_Perfkit_Channels_remove_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Remove", com_dronelabs_Perfkit_Channels_remove_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_dronelabs_Perfkit_Channels_find_all (DBusGProxy *proxy, GPtrArray** OUT_paths, GError **error)

{
  return dbus_g_proxy_call (proxy, "FindAll", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), OUT_paths, G_TYPE_INVALID);
}

typedef void (*com_dronelabs_Perfkit_Channels_find_all_reply) (DBusGProxy *proxy, GPtrArray *OUT_paths, GError *error, gpointer userdata);

static void
com_dronelabs_Perfkit_Channels_find_all_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_paths;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), &OUT_paths, G_TYPE_INVALID);
  (*(com_dronelabs_Perfkit_Channels_find_all_reply)data->cb) (proxy, OUT_paths, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_dronelabs_Perfkit_Channels_find_all_async (DBusGProxy *proxy, com_dronelabs_Perfkit_Channels_find_all_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "FindAll", com_dronelabs_Perfkit_Channels_find_all_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_com_dronelabs_Perfkit_Channels */

G_END_DECLS
